"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const sequelize_service_1=require("./sequelize-service");let log=require("npmlog");const TAG="BaseService";class CRUDService{getModels(e){return sequelize_service_1.default.getInstance().models[e]}getSequelize(){return sequelize_service_1.default.getInstance().sequelize}errHandler(e){if(e.name)return{status:!1,errMessage:e.message};throw e}create(e,t){return log.verbose(TAG,`create(): modelName=${e} data=${JSON.stringify(t)}`),this.getModels(e).create(Object.assign(t,{id:null})).then(e=>({status:!0,data:e.get({plain:!0})})).catch(this.errHandler)}read(e,t){return log.verbose(TAG,`read(): modelName=${e} searchClause=${JSON.stringify(t)}`),this.getModels(e).findAll({where:t}).then(e=>({status:!0,data:e.map(e=>e.get({plain:!0}))})).catch(this.errHandler)}readOne(e,t){return this.getModels(e).findOne({where:t}).then(e=>e?{status:!0,data:e.get({plain:!0})}:{status:!1,errMessage:"Data not found"}).catch(this.errHandler)}rawReadQuery(e){return this.getSequelize().query(e,{type:this.getSequelize().QueryTypes.SELECT}).then(e=>({status:!0,data:e}))}rawReadOneQuery(e){return this.rawReadQuery(e).then(e=>e.status&&e.data?e.data.length?{status:!0,data:e.data[0]}:{status:!1,errMessage:"Data not found!"}:e)}update(e,t,a){return log.verbose(TAG,`update(): modelName=${e} data=${JSON.stringify(t)}`),this.getModels(e).update(t,{where:a}).spread(e=>e>0?{status:!0,data:e}:{status:!1,errMessage:"Data not found"}).catch(this.errHandler)}delete(e,t){return log.verbose(TAG,`delete(): modelName=${e} searchClause=${JSON.stringify(t)}`),this.getModels(e).destroy({where:t}).then(e=>e>0?{status:!0,data:e}:{status:!1,errMessage:"Data not found"}).catch(this.errHandler)}}exports.CRUDService=CRUDService,exports.default=CRUDService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
